# Напишите класс PersonInfo
# Экземпляр класса создается из следующих атрибутов:
# 1. Строка - "Имя Фамилия"
# 2. Число - возраст сотрудника
# 3. Подразделения от головного до того, где работает сотрудник.
# Реализуйте методы класса:
# 1. short_name, который возвращает строку Фамилия И.
# 2. path_deps, возвращает путь "Головное подразделение --> ... --> Конечное подразделение"
# 3. new_salary, Директор решил проиндексировать зарплаты, и новая зарпалата теперь вычисляет по формуле:
# 1337*Возраст*суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
# (регистр имеет значение "А" и "а" - разные буквы)
# Например (Ввод --> Вывод) :
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').short_name() --> 'Шленский А.'
# PersonInfo('Александр Шленский',
#            32,
#            'Разработка', 'УК', 'Автотесты').path_deps() -->
#            'Разработка --> УК --> Автотесты'
# PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты').new_salary() --> 385056 т.к.
# т.к. буква "т" встречается 4 раза, "а" 3 раза, 'о' 2 раза, остальные по одной. Сумма трёх самых частых букв 4+3+2 = 9.
# 1337*32*9 = 385056

# Здесь пишем код
class PersonInfo:
    """
    Класс используется для:
    1. Преобразования "Имя Фамилия" в "Фамилия И."
    2. Возвращает путь подразделения от головного до конечного, добавляя разделитель " --> "
    3. Вычисляет зарплату сотрудника после индексации
    """
    def __init__(self, *args):
        """
        Инициализация данных сотрудника
        :param args: Name = Имя, Фамилия; age =  Возраст; subdivision =  подразделения, от головного до конечного
        """
        self.Name = list(args[0].split(' '))  # Берем нулевой по индексу элемент из кортежа (строку) и преобразуем ее в список по разделителю "пробел" (Имя Фамилия)
        self.age = args[1]  # Берем первый по индексу элемент из кортежа (Возраст)
        self.subdivision = args[2:]  # # Берем срез от второго по индексу элемента и до конца (Подразделения)

    def short_name(self):
        """
        Метод для преобразования "Имя Фамилия" в "Фамилия И."
        :return: "Фамилия И."
        """
        str_for_name = self.Name[1] + ' ' + self.Name[0][0] + '.'  # Добавляем в строку фамилию, разделитель "пробел", первую букву имени и точку
        return str_for_name  # Возвращаем получившуюся строку

    def path_deps(self):
        """
        Метод для преобразования пути подразделения от головного до конечного, добавляя разделитель " --> "
        :return: путь "Головное подразделение --> ... --> Конечное подразделение"
        """
        str_for_path_deps = ''  # Заводим пустую строку, в которую будем добавлять подразделения от головного до конечного
        for i in self.subdivision:  # Пробегаем по элементам кортежа, в котором лежат данные о подразделениях сотрудника
            str_for_path_deps += i + ' --> '  # Добавляем в строку подразделения от головного до конечного, добавляя разделитель ' --> '
        str_for_path_deps = str_for_path_deps[:-5]  # Убираем из строки последний разделитель ' --> '
        return str_for_path_deps  # Возвращаем путь подразделений от головного до конечного

    def new_salary(self):
        """
        Метод для вычисления зарплаты после индексации
        :return: новая зарплата
        """
        str_for_new_salary = ''  # Новая строка, в которую будем добавлять буквы, которые входят в подразделения
        new_dict = {}  # Новый словарь, в котором "key" - буква из строки "str_for_new_salary", value - кол-во, сколько раз буква встречается в строке "str_for_new_salary"
        new_list = []  # Список, в который будем складывать "value" из словаря new_dict
        new_salary = 0  # Новая зарплата изначально равна нулю
        for i in self.subdivision:  # Пробегаем по значениям кортежа подразделений
            str_for_new_salary += i  # Добавляем подразделения в строку
        for j in str_for_new_salary:  # Пробегаем по значениям строки
            new_dict[j] = str_for_new_salary.count(j)  # Добавляем в словарь данные, где "key" - символ из строки, "value" - кол-во повторений символа в строке
        for value in new_dict.values():  # Пробегаем по значениям (value) словаря
            new_list.append(value)  # Добавляем значения словаря в список
        new_list.sort(reverse=True)  # Отсортировываем список от большего значения к меньшему
        # Рассчитываем новую зарплату по заданной формуле:
        # 1337 * Возраст * суммарное кол-во вхождений трех наиболее часто встречающихся букв из списка подразделений
        new_salary = 1337 * self.age * (new_list[0] + new_list[1] + new_list[2])
        return new_salary  # Возвращаем значение зарплаты после индексации

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


first_person = PersonInfo('Александр Шленский', 32, 'Разработка', 'УК', 'Автотесты')
fourth_person = PersonInfo('Иван Иванов', 26, 'Разработка')
second_person = PersonInfo('Пётр Валерьев', 47, 'Разработка', 'УК')
third_person = PersonInfo('Макар Артуров', 51, 'Разработка', 'УК', 'Нефункциональное тестирование', 'Автотестирование')

data = [first_person.short_name,
        second_person.short_name,
        third_person.short_name,
        fourth_person.short_name,

        first_person.path_deps,
        second_person.path_deps,
        third_person.path_deps,
        fourth_person.path_deps,

        first_person.new_salary,
        second_person.new_salary,
        third_person.new_salary,
        fourth_person.new_salary
        ]


test_data = ['Шленский А.', 'Валерьев П.', 'Артуров М.', 'Иванов И.',

             'Разработка --> УК --> Автотесты',
             'Разработка --> УК',
             'Разработка --> УК --> Нефункциональное тестирование --> Автотестирование',
             'Разработка',
             385056, 314195, 1227366, 173810]

for i, d in enumerate(data):
    assert_error = f'Не прошла проверка для метода {d.__qualname__} экземпляра с атрибутами {d.__self__.__dict__}'
    assert d() == test_data[i], assert_error
    print(f'Набор для метода {d.__qualname__} экземпляра класса с атрибутами {d.__self__.__dict__} прошёл проверку')
print('Всё ок')