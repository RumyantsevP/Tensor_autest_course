# Напишите класс Trigon, для инициализации передаётся неизвестное кол-во атрибутов

# В классе при инициализации происходит проверка на корректность переданных данных и генерируются следующие исключения:

# 1) Если хотя бы одна сторона передана не числом,
# то падаем с TypeError и текстом 'Стороны должны быть числами'

# 2) Если хотя бы одна сторона передана нулем или отрицательным числом,
# то падаем с ValueError и текстом 'Стороны должны быть положительными'

# 3) Если не соблюдается неравество треугольника,
# то Exception и текст "Не треугольник"

# 4) Если передано не 3 аргумента, то IndexError "Передано {n} аргументов, а ожидается 3", где n - кол-во аргументов

import unittest  # Не удалять


# Здесь пишем код
class Trigon:
    """
    Класс используется для:
    Для проверки валидности переданных данных сторон треугольника
    """
    def __init__(self, *args):
        """
        Инициализация данных о сторонах треугольника
        :param args: кортеж из неизвестного кол-ва атрибутов
        """
        new_list = []  # Создаем пустой список, в который будем складывать входные данные
        for i in args:  # Перебираем элементы кортежа
            new_list.append(i)  # Добавляем элементы кортежа в список
        if len(new_list) != 3:  # Если в списке больше или меньше 3 элементов
            # Генерируем исключение IndexError с текстом "Передано {n} аргументов, а ожидается 3", где n - кол-во аргументов
            raise IndexError(f"Передано {len(new_list)} аргументов, а ожидается 3")
        elif type(new_list[0]) != int or type(new_list[1]) != int or type(new_list[2]) != int:  # Если хотя бы одна сторона передана не числом
            raise TypeError('Стороны должны быть числами')  # Генерируем исключение TypeError с текстом 'Стороны должны быть числами'
        elif new_list[0] <= 0 or new_list[1] <= 0 or new_list[2] <= 0:  # Если хотя бы одна сторона передана нулем или отрицательным числом
            raise ValueError('Стороны должны быть положительными')  # Генерируем исключение ValueError с текстом 'Стороны должны быть положительными'
        # Если не соблюдается неравество треугольника
        elif new_list[0] > new_list[1] + new_list[2] or new_list[1] > new_list[0] + new_list[2] or new_list[2] > new_list[0] + new_list[1]:
            raise Exception("Не треугольник")  # Генерируем исключение Exception с текстом "Не треугольник"


# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


class MyTestCase(unittest.TestCase):

    def test(self):
        data = [(3, '7', 5), (-3, 7, 5), (2, 5, 2), (3, 4, 5, 6), (3, 4), (3, 4, 5)]

        test_data = [('Стороны должны быть числами', 'TypeError'),
                     ('Стороны должны быть положительными', 'ValueError'),
                     ("Не треугольник", 'Exception'),
                     ("Передано 4 аргументов, а ожидается 3", 'IndexError'),
                     ("Передано 2 аргументов, а ожидается 3", 'IndexError'),
                     0]
        for i, d in enumerate(data):
            try:
                Trigon(*data[i])
            except Exception as e:
                assert e.args[0] == test_data[i][0], 'Исключение имеет неправильный текст'
                assert type(e).__name__ == test_data[i][1], 'У исключения неправильный тип'

        print('Всё ок')


if __name__ == '__main__':
    unittest.main()
