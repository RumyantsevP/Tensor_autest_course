# Напишите функцию segment
# На вход подается два кортежа с координатами точек (x1, y1), (x2, y2)

# В функции происходит проверка на корректность полученных данных.
# С помощью инструкции try/except as отлавливается исключение Exception. И если это исключение поймано,
# то функция возвращает текст исключения задом наперед (Нужно обратится к атрибуту экзепляра класса Exception)
# Если исключения не произошло, то функция возвращает сумму всех координат


# Здесь пишем код
def segment (point_1, point_2):
    """
    Метод для проверки возможности сложения всех координат двух точек
    :param point_1: первая точка с координатами
    :param point_2: вторая точка с координатами
    :return: информацию о возможности сложить все координаты двух точек
    """
    summ = 0  # Заводим переменную, в которую будем складывать сумму всех координат двух точек
    try:  # Пробуем сложить все координаты двух точек
        summ += point_1[0] + point_1[1] + point_2[0] + point_2[1]  # В переменную суммируем координаты точек
        return summ  # Возвращаем итоговую сумму координат точек
    except Exception as error:  # Обрабатываем тип исключений "Exception"
        return error.args[0][::-1]  # возвращаем текст исключения задом наперед

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    ((2, 3), (4, 5)),
    ((2, -3), (4, 5)),
    ((2, 3), ('4', 5)),
    (('a', 3), (4, 5)),
]

test_data = [
    14,
    8,
    "'rts' dna 'tni' :+ rof )s(epyt dnarepo detroppusnu",
    'rts ot )"tni" ton( rts etanetacnoc ylno nac']


for i, d in enumerate(data):
    assert segment(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')
