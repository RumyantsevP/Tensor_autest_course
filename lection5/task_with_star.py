# Напишите функцию to_roman, которая преобразуют арабское число (val) в римское (roman_str).#
# Современные римские цифры записываются, выражая каждую цифру отдельно,
# начиная с самой левой цифры и пропуская цифру со значением нуля.
# Римскими цифрами 1990 отображается: 1000=М, 900=СМ, 90=ХС; в результате MCMXC.
# 2023 записывается как 2000=MM, 20=XX, 3=III; или MMXXIII.
# В 1666 используется каждый римский символ в порядке убывания: MDCLXVI.
#
# Например (Ввод --> Вывод) :
# 2008 --> MMVIII


def to_roman(val):
    '''
    Выводим римское число, преобразованное из арабского
    :param val: арабское число
    :return: римское число
    '''
    # Здесь нужно написать код
    roman_str = ''  # Создаем пустую строку
    new_dict = {}  # Создаем пустой словарь
    new_dict[1] = 'I'  # Добавляем в словарь пару Ключ/Значение, где Ключ "1" - Арабское число, Значение - Римское число "I", аналогия арабского "1"
    new_dict[5] = 'V'  # Добавляем в словарь пару Ключ/Значение, где Ключ "5" - Арабское число, Значение - Римское число "V", аналогия арабского "5"
    new_dict[10] = 'X'  # Добавляем в словарь пару Ключ/Значение, где Ключ "10" - Арабское число, Значение - Римское число "X", аналогия арабского "10"
    new_dict[50] = 'L'  # Добавляем в словарь пару Ключ/Значение, где Ключ "50" - Арабское число, Значение - Римское число "L", аналогия арабского "50"
    new_dict[100] = 'C'  # Добавляем в словарь пару Ключ/Значение, где Ключ "100" - Арабское число, Значение - Римское число "C", аналогия арабского "100"
    new_dict[500] = 'D'  # Добавляем в словарь пару Ключ/Значение, где Ключ "500" - Арабское число, Значение - Римское число "D", аналогия арабского "500"
    new_dict[1000] = 'M'  # Добавляем в словарь пару Ключ/Значение, где Ключ "1000" - Арабское число, Значение - Римское число "M", аналогия арабского "1000"
    # Для тысяч
    if 0 < val // 1000:  # Если в исходном числе значение тысяч больше 0
        roman_str += val // 1000 * new_dict[1000]  # Добавляем в строку римский символ "M" в количестве раз, полученном в итоге вычисления в строке выше
    # Для сотен
    if val % 1000 // 100 == 0:  # Если в исходном числе значение сотен равно 0
        pass  # Пропускаем это значение
    elif 0 < val % 1000 // 100 < 4:  # Если в исходном числе значение сотен от 1 включительно до 3 включительно
        roman_str += val % 1000 // 100 * new_dict[100]  # Добавляем в строку римский символ "D" в количестве раз, полученном в итоге вычисления в строке выше
    elif val % 1000 // 100 == 4:  # Если в исходном числе значение сотен равно 4
        roman_str += new_dict[100] + new_dict[500]  # Добавляем в строку римский символ "C" и "D"
    elif val % 1000 // 100 == 5:  # Если в исходном числе значение сотен равно 5
        roman_str += new_dict[500]  # Добавляем в строку римский символ "D"
    elif 5 < val % 1000 // 100 < 9:  # Если в исходном числе значение сотен от 6 включительно до 8 включительно
        roman_str += new_dict[500] + (val % 1000 // 100 - 5) * new_dict[100]  # Добавляем в строку римский символ "D", и символ "С" в количестве раз, полученном в итоге вычисления (5 минус значение, полученное в строке выше)
    else:  # Если в исходном числе значение сотен равно  9
        roman_str += new_dict[100] + new_dict[1000]  # Добавляем в строку римский символ "C" и "М"
    # Для десятков
    if val % 100 // 10 == 0:  # Если в исходном числе значение десятков равно 0
        pass  # Пропускаем это значение
    elif 0 < val % 100 // 10 < 4:  # Если в исходном числе значение десятков от 1 включительно до 3 включительно
        roman_str += val % 100 // 10 * new_dict[10]  # Добавляем в строку римский символ "Х" в количестве раз, полученном в итоге вычисления в строке выше
    elif val % 100 // 10 == 4:  # Если в исходном числе значение десятков равно 4
        roman_str += new_dict[10] + new_dict[50]  # Добавляем в строку римский символ "Х" и "L"
    elif val % 100 // 10 == 5:  # Если в исходном числе значение десятков равно 5
        roman_str += new_dict[50]  # Добавляем в строку римский символ "L"
    elif 5 < val % 100 // 10 < 9:  # Если в исходном числе значение десятков от 6 включительно до 8 включительно
        roman_str += new_dict[50] + (val % 100 // 10 - 5) * new_dict[10]  # Добавляем в строку римский символ "L", и символ "X" в количестве раз, полученном в итоге вычисления (5 минус значение, полученное в строке выше)
    else:  # Если в исходном числе значение десятков равно 9
        roman_str += new_dict[10] + new_dict[100]  # Добавляем в строку римский символ "X" и "C"
    # Для единиц
    if val % 10 == 0:  # Если в исходном числе значение единиц равно 0
        pass  # Пропускаем это значение
    elif 0 < val % 10 < 4:  # Если в исходном числе значение единиц от 1 включительно до 3 включительно
        roman_str += val % 10 * new_dict[1]  # Добавляем в строку римский символ "I" в количестве раз, полученном в итоге вычисления в строке выше
    elif val % 10 == 4:  # Если в исходном числе значение единиц равно 4
        roman_str += new_dict[1] + new_dict[5]  # Добавляем в строку римский символ "I" и "V"
    elif val % 10 == 5:  # Если в исходном числе значение единиц равно 5
        roman_str += new_dict[5]  # Добавляем в строку римский символ "V"
    elif 5 < val % 10 < 9:  # Если в исходном числе значение единиц от 6 включительно до 8 включительно
        roman_str += new_dict[5] + (val % 10 - 5) * new_dict[1]  # Добавляем в строку римский символ "V", и символ "I" в количестве раз, полученном в итоге вычисления (5 минус значение, полученное в строке выше)
    else:  # Если в исходном числе значение единиц равно 9
        roman_str += new_dict[1] + new_dict[10]  # Добавляем в строку римский символ "I" и "X"
    return roman_str  # Возвращаем итоговую строку с римской

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [1133, 2224, 1938, 1817, 2505, 391, 3743, 1634, 699, 1666, 1494, 1444]

test_data = [
    "MCXXXIII", "MMCCXXIV", "MCMXXXVIII", "MDCCCXVII", "MMDV", "CCCXCI", 'MMMDCCXLIII', 'MDCXXXIV', 'DCXCIX', 'MDCLXVI',
    'MCDXCIV', 'MCDXLIV']


for i, d in enumerate(data):
    assert to_roman(d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')